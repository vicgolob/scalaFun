11) Por que mezclar Objetos con Funcional?

Nota #: 11

*) Intro: Conceptos de objetos / Funcional

3 PILARES de objetos:
	Anexo: orden superior
	
	1- Polimorfismo (ad-hoc): (el objeto que recibe, que se define en run-time, es el encargado de ejecutar el metodo)
	2- Delegacion
	3- Encapsulamiento
Orden superior: Siempre que pasas un parametro, tenés Orden Superior porque todos los objetos que pasas se pueden ejecutar
	
	Regla de Oro: Siempre hay alguien que va a saber ejecutar.

3 Pilares de funcional:
	Piramide Primer Mundo:
	1- Polimorfismo(parametrico)
	2- Inmutabilidad: no hay efecto de lado.
	3- Transparencia Referencial: una funcion sólo depende sus parámetros para su resultado. Puedo reemplazar la funcion por el resultado.

	Piramide Subdesarrollo(viven del primer mundo)
	1- Polimorfismo(parametrico): pattern-matching - no delego, segun el tipo, eligo que hacer.
	2- Aplicacion Parcial (convertir una funcion en otra)
	3- Composicion


*) Motivacion:

Visitor-Pattern: Tengo una estructura compleja (ej. un decorator). 
	- Tengo tareas que le tengo que asignar a esta estructura ya existente. Quiero agregar una funcionalidad a la misma.


	Estructura:
		E :: acepta(VisitorInterface)
		
		E1 :: acepta(VisitorInterface v)
			v.visitar(this)

	Visitor de imprimir: 
		VisitorInterfaz:: visitar(E1) // Imprimo un E1
		VisitorInterfaz:: visitar(E2) // Imprimo un E2
		VisitorInterfaz:: visitar(E3) // Imprimo un E3

		Visitor1ImprimoEnMongoDB::visitar(E1)
		Visitor2ImprimoEnMongoDB::visitar(E2)
		Visitor3ImprimoEnMongoDB::visitar(E3)
	
	Por qué lo uso?
	- Cuando programo una estructura defin un scope para la misma. Pero puede ser que me quede corto, que necesite hacer algo mas en un futuro.
	- Objetivo: Agregar funcionalidad a un
	- Agregar una operacion nueva - Visitor4 - no rompe nada, es sencillo.

	Problema del Visitor?
	- Agrego un nueva estructura E2 -> Rompo todo el visitor:: ("visitar(E2)") no existe en la interfaz.
	- Agrego un nuevo funcionalidad a la interfaz VisitorInterface. Tengo que sumarla a Visitor Interface y agregarlo a cada uno de los visitor.
	- Requiere mucho código para implementar.


	---> LLEGAMOS A OTRO BORDE DE LA PROGRAMACION ORIENTADA A OBJETOS <---
	1 Borde) Herencia Simple
	
	2 Borde) Visitor Pattern - agregar una nueva funcionalidad a una interfaz existente.

	3 Borde) Tenes un Microprocesador, que por cada instruccion cambia su estado...que pasa si queres rollbackear???

